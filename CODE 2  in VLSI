    // RAM CELL

module ram(
input clk,
input [5:0] addr,
input [7:0] data_in,
input write_en,
output [7:0] data_out
);
reg [5:0]read_addr;
reg [7:0]ram[63:0];
always @ (posedge clk)
begin
if (write_en==1)
ram[addr]=data_in;
read_addr=addr;
end
assign data_out=ram[read_addr];
endmodule



        // UNIVERSAL SHIFT REGISTER

module usr(
input [7:0] data_in,
input clk,
input rst,
input din_left,
input din_right,
input [1:0] opsel,
output [7:0] data_out
);
reg [7:0]q;
always @ (posedge clk,rst)
begin
if (rst==1)
q=0;
else
case (opsel)
0: q=data_in;
1: q={q<<1,din_left};
2: q={din_right,q>>1};
3: q=data_in;
endcase
end
assign data_out=q;
endmodule



     // FINITE STATE MACHINE


module fsm(
input rst,
input clk,
input in,
input out
);
reg out1;
reg [1:0]state;
assign out=out1;
always @ (posedge clk, rst)
begin
if (rst) begin
out1=0; state=2'b00;
end
else begin
case (state)
2'b00: begin
if (in) begin state=2'b01;
out1=1'b0;
end
else begin
state=2'b11;
out1=1'b1;
end
end
2'b01: begin
if (in) begin
state=2'b11;
out1=1'b1;
end
else begin
state=2'b10;
out1=1'b0;
end
end
2'b10: begin
if (in) begin
state=2'b00;
out1=1'b0;
end
else begin
state=2'b01;
out1=1'b0;
end
end
2'b11: begin
if (in) begin
state=2'b11;
out1=1'b1;
end
else begin
state=2'b10;
out1=1'b0;
end
end
endcase
end
end
endmodule

